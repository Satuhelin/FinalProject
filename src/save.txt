import * as d3 from 'd3'
import * as topojson from 'topojson'
import d3Tip from 'd3-tip'
import d3Annotation from 'd3-svg-annotation'
d3.tip = d3Tip

const margin = { top: 0, left: 0, right: 0, bottom: 0 }

const height = 500 - margin.top - margin.bottom

const width = 900 - margin.left - margin.right

const svg = d3
  .select('#chart-3')
  .append('svg')
  .attr('height', height + margin.top + margin.bottom)
  .attr('width', width + margin.left + margin.right)
  .append('g')
  .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

  const colorScale = d3.scaleSequential(d3.interpolatePiYG).domain([0,100])

const projection = d3.geoMercator()
// out geoPath needs a PROJECTION variable
const path = d3.geoPath().projection(projection)



  d3.json(require('/data/trump_only'))  
  .then(ready)
  .catch(err => console.log('Failed on', err))

  function ready(json) {
    //console.log('What is our data?')
    console.log(json)
    const countries = topojson.feature(json, json.objects.trump_only)
    
  console.log(json.objects.trump_only)

  
  

  svg
    .selectAll('.country')
    .data(countries.features)
    .enter()
    .append('path')
    .attr('class', 'country')
    .attr('d', path)
    .attr('fill', function(d) {
      if(d.properties.ADMIN == 'Vietnam') {
        console.log('vietnam is', d)
      }
      if (d.properties.trump_on_6 > 40) {
        return 'red'
      }
      if (d.properties.trump_on_1 === 'TRUMP') {
        return 'pink'
      }
      return 'lightgrey'
    })

    svg
    .selectAll('text')
    .data(countries.features)
    .enter()
    .append('text')
    .style('visibility', 'hidden')
    .attr('fill', 'black')
    .text(function(d) {
      console.log(d)
      return d.properties.SU_A3
    })
    .attr('transform', function(d) {
      return `translate(${path.centroid(d)})`
    })
    .attr('text-anchor', 'middle')
    .attr('alingment-baseline', 'middle')
    .attr('dy', function(d) {
      return 0
  
    .attr('font-size', 18)
    .attr('dx', 10)
    .attr('dy', 0)
    .attr('class', d => d.properties.SU_A3)
    })

    .on('mouseover', d => {
      console.log('hello')
      const className = d.properties.SU_A3

      svg
        .selectAll('text.' + className)
        .attr('font-size', 25)
        .style('visibility', 'visible')
        .raise()
    })
    .on('mouseout', d => {
      const className = d.properties.SU_A3
      svg.selectAll('text.' + className).attr('font-size', 15).style('visibility', 'hidden')
    })

    .on('mouseover', tip.show)
    .on('mouseout', tip.hide)
  svg.call(tip)

    }
  /* 

Begin responsive design and scrollytelling

*/

/* svg {
    display: block;
  }
  
  /* Scrollytelling sections can be wider than the normal 700px width */
  .scrollytelling.story-body {
    max-width: 960px;
  }
  
  .scrollytelling {
    display: flex;
    flex-wrap: wrap;
  }
  
  /* Everything inside of scrollytelling gets normal full width... */
  .scrollytelling > * {
    flex-basis: 100%;
    flex-shrink: 0;
  }
  
  /* ...except the .steps and .chart! They'll share a row, sometimes */
  .scrollytelling > .steps,
  .scrollytelling > .chart {
    flex-basis: 20%;
    flex-shrink: 0;
    flex-grow: 1;
  }
  
  /* The bigger 'flex-grow' the more space it takes up */
  .scrollytelling > .chart {
    flex-grow: 3;
    overflow: hidden;
  }
  
  .scrollytelling .chart {
    margin-right: 15px;
    position: sticky;
    top: 0;
    z-index: 0;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .scrollytelling .chart svg {
    margin: auto;
  }
  
  .scrollytelling .chart img {
    width: 100wh;
  }
  
  .scrollytelling .step {
    max-width: 30rem;
    margin: 0 auto;
    margin-bottom: 80vh;
    padding: 30px;
    background: rgba(255, 255, 255, 0.90);
    pointer-events: auto;
  }
  
  .scrollytelling .step *:first-child {
    margin-top: 0;
    padding-top: 0;
  }
  
  .scrollytelling .step *:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
  }
  
  /* This is the point where it collapses */
@media (max-width:900px) {
    .scrollytelling > * {
        flex-basis: 100% !important;
    }
    .scrollytelling .chart {
        margin-right: 0;
    }
  } */